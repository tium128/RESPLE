1. Configurer le driver RoboSense pour XYZIRT
Dans le fichier de configuration du SDK (rslidar_sdk/config/config.yaml), ajoutez ou modifiez le paramètre qui définit le type de point à publier. Selon la version du SDK, ça peut s’appeler point_format ou point_type. Par exemple :

common:
  msg_source: 3            # PCAP
  pcap_directory: /home/user/airy96.pcap

lidar:
  - driver:
      lidar_type: RSAIRY
      point_type: XYZIRT   # <— passez à XYZIRT pour inclure ring et timestamp
      msop_port: 6699
      difop_port: 7788
      imu_port: 6688
    ros:
      ros_frame_id: airy96
      ros_send_point_cloud_topic: /airsense/points




1. Dans votre shell WSL, avant tout
bash
Copy
Edit
# Forcez DISPLAY sur :0 (socket local), pas l'IP 10.255…
export DISPLAY=:0

# Autorisez les clients Docker à se connecter au XWayland
xhost +local:docker
Si xhost +local:docker échoue encore, assurez-vous bien que vous avez exporté DISPLAY=:0 avant de l’appeler.

2. Lancement du container en mode X11
bash
Copy
Edit
docker run --rm -it \
  --network host \
  -e DISPLAY=$DISPLAY \
  -e QT_QPA_PLATFORM=xcb \
  -e QT_X11_NO_MITSHM=1 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  lidar_spline_filter \
  rviz2 -d /root/ros2_ws/install/resple/share/resple/config/config.rviz
-e DISPLAY=$DISPLAY → :0, le socket /tmp/.X11-unix/X0 de WSLg

-v /tmp/.X11-unix:/tmp/.X11-unix → accès direct au socket XWayland

QT_QPA_PLATFORM=xcb + QT_X11_NO_MITSHM=1 → plugin XCB sans MIT-SHM


LANCEMENT D'UN REPLAY DE BAG POUR RESPLE
J’ai remplacé la valeur figée de bag_file par une expansion d’environnement $(env BAG_FILE), ce qui vous permet :

Via Docker

bash
Copy
Edit
docker run -e BAG_FILE=/data/my_bag.bag your_image \
  ros2 run resple resple_node --ros-args \
    -p ros__parameters.use_sim_time:=true \
    -p ros__parameters.processing_mode:=offline
En CLI ROS2 (sans env var)

bash
Copy
Edit
ros2 run resple resple_node --ros-args \
  -p ros__parameters.bag_file:="/bags/mon_bag_20250510_084353" \
  -p ros__parameters.use_sim_time:=true \
  -p ros__parameters.processing_mode:=offline
Ainsi, vous n’avez plus qu’à passer BAG_FILE (ou -p bag_file:=...) au lancement, sans toucher au YAML.



Lancement conteneur dans un terminal avec montage du répertoire du Bag:
Pour éviter l’erreur sur setup.bash ET monter ton volume /bags, tu peux complètement court-circuiter l’ENTRYPOINT qui sourçait ce fichier manquant et monter en bind-mount ton dossier de bagues :

bash
Copy
Edit
docker run --rm -it \
  --entrypoint /bin/bash \
  --network host \
  -e DISPLAY=$DISPLAY \
  -e QT_QPA_PLATFORM=xcb \
  -e QT_X11_NO_MITSHM=1 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -v /mnt/c/Geoslam_workflow/Bag:/bags \
  lidar_spline_filter
Explications :

--entrypoint /bin/bash
Remplace complètement l’ENTRYPOINT défini dans l’image par un shell bash, donc il n’essaie pas de sourcer /root/ros2_ws/install/setup.bash au démarrage.

-v /mnt/c/Geoslam_workflow/RESPLE/bags:/bags
Monte ton dossier bags Windows (ou n’importe quel chemin hôte) dans le conteneur sous /bags, en respectant le VOLUME ["/bags"] que tu as défini